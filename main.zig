const std = @import("std");
const cpu_lib = @import("cpu.zig").CPU;
const font = [_]u8{
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80,
};
pub fn main() !void {
    var cpu = cpu_lib.init();
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    const alloc = gpa.allocator();
    std.debug.print("{}", .{cpu.SP});
    var args = std.process.args();
    _ = args.skip();
    const name_of_file: []const u8 = args.next() orelse "";
    const file = try std.fs.cwd().openFile(name_of_file, .{});
    defer file.close();
    const buff = try file.readToEndAlloc(alloc, std.math.maxInt(usize));
    std.debug.print("{s}\n", .{name_of_file});
    std.debug.print("{d}\n", .{buff.len});
    cpu_lib.readFont(&cpu, &font);
    cpu_lib.loadRom(&cpu, buff);
    for (cpu.ram) |elem| {
        std.debug.print("{X}", .{elem});
    }
    while (cpu_lib.readOpcode(&cpu)) {}
}
